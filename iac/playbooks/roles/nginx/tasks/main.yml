---
- name: Install Prerequisites
  apt: name=python-simplejson update_cache=yes state=latest force_apt_get=yes

- name: Install Nginx
  apt: name=nginx update_cache=yes state=latest

# TODO: Implement the use of port 443 for production only usage
#- name: "UFW - Allow HTTP on port {{ https_port }}"
#  ufw:
#    rule: allow
#    port: "{{ https_port }}"
#    proto: tcp

# CAUTION: This step should only be used during NON-PROD deployments
- name: 'UFW - Allow HTTP on port {{ http_port }}'
  ufw:
    rule: allow
    port: '{{ http_port }}'
    proto: tcp

- name: Removes "default" site
  file:
    path: '/etc/nginx/sites-enabled/default'
    state: absent
  notify: Reload Nginx

# Need to stop the nginx service to allow for the certificate to be generated
- name: Stop nginx to allow for letsencrypt
  service: name=nginx state=stopped

- name: Install zip
  apt: name=zip update_cache=yes state=latest

- name: Generate dhparams
  shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

# install core
- name: Install snap core
  shell: snap install core

- name: Refresh snap core
  shell: snap refresh core

# Remove default os certbot
- name: Install snap core
  shell: apt-get remove certbot

- name: Install snap classic certbot
  shell: snap install --classic certbot

# Link certbot
- name: Link certbot
  shell: ln -s /snap/bin/certbot /usr/bin/certbot

# Snap trust plugin
- name: Snap trust plugin
  shell: snap set certbot trust-plugin-with-root=ok

# Snap cloudflare plugin
- name: Snap cloudflare plugin
  shell: snap install certbot-dns-cloudflare

# TODO: Implement SSL management for port 443
# mkdir secrets
#- name: Make directory secrets
#  shell: mkdir ~/.secrets

# make file
#- name: Make cloudflare.ini file
#  shell: touch ~/.secrets/cloudflare.ini

# Print the email to cloudflare file
#- name: Print the email to the cloudflare file
#  shell: printf "dns_cloudflare_email = {{ letsencrypt_email }}\\n" >> ~/.secrets/cloudflare.ini

#- name: Print the secret to the cloudflare file
#  shell: printf "dns_cloudflare_api_key = {{ dns_cloudflare_api_key }}\\n" >> ~/.secrets/cloudflare.ini

# TODO: Remove --dry-run when blue/green deployment is ready
# Call on cloudflare to approve ssl cert
#- name: Certbot cloudflare create and validate certs
#  shell: |
#    certbot certonly \
#    --dns-cloudflare \
#    --dns-cloudflare-credentials ~/.secrets/cloudflare.ini \
#    --dns-cloudflare-propagation-seconds 60 \
#    -m {{ letsencrypt_email }} \
#    -n --agree-tos \
#    -d {{ http_host }} \
#    -d www.{{ http_host }} \
#    -d {{ uuid }}.{{ http_host }}

- name: install pip3
  apt: name=python3-pip update_cache=yes state=latest

- name: install and upgrade setup tools
  shell: pip3 install --upgrade setuptools

- name: Ensure boto and boto3 modules are installed
  pip:
    name: ['boto3', 'botocore']
  delegate_to: '{{ do_instance_ip }}'

- name: Install aws cli
  apt: name=awscli update_cache=yes state=latest

- name: pip3 install upgrade
  shell: pip3 install --upgrade awscli

- name: configure aws creds
  shell: |
    aws configure << ANSWERS
    {{ aws_access_key }}
    {{ aws_secret_key }}
    eu-west-1
    json
    ANSWERS

#- name: Creates nginx ssl options
#  template:
#    src: "options-ssl-nginx.conf.j2"
#    dest: "/etc/letsencrypt/options-ssl-nginx.conf"

- name: Install system nginx config
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf

# TODO: Check correct http_host
# Nginx Configuration
- name: Sets Nginx conf file
  template:
    src: 'packet-pigeon-subscriber.conf.j2'
    dest: '/etc/nginx/sites-available/{{ http_host }}'

- name: Enables new site
  file:
    src: '/etc/nginx/sites-available/{{ http_host }}'
    dest: '/etc/nginx/sites-enabled/{{ http_host }}'
    state: link
  notify: Restart Nginx

# TODO: Implement a cron job to renew the certificates before expiry.

# This needs to be removed to allow the certificate to be renewed
- name: Reload nginx to activate specified site
  service: name=nginx state=restarted
