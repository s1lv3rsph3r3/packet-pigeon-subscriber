name: Simple Deployment

# Controls when the action will run.
on:
  # Triggers the workflow on push only for the main branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linting:
    runs-on: ubuntu-20.04
    name: Linting
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install modules
        run: npm ci
      - name: Run linting check
        run: npm run linter

  test:
    needs: [linting]
    runs-on: ubuntu-20.04
    name: Unit tests
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install modules
        run: npm ci
      - name: Run tests
        run: npm run test

  terraform:
    needs: [test]
    runs-on: ubuntu-20.04
    name: Setup terraform
    steps:
      - uses: actions/checkout@v2
      - name: Install terraform
        env:
          TERRAFORM_VERSION: '0.14.9'
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: terraform --version

      - name: Configure AWS credentials for profile=default
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set env
        run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

      - name: Test the env just created
        run: echo ${{ env.UUID }}

      - name: Initialise
        run: |
          cd iac/terraform
          terraform init

      - name: Terraform validate
        run: |
          cd iac/terraform
          terraform validate

      - name: Terraform plan
        run: |
          cd iac/terraform
          terraform plan \
          -var "do_token=${{ secrets.DO_AUTH_TOKEN }}" \
          -var "pvt_key=$HOME/.ssh/id_rsa" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
          -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
          -var "uuid=${{ env.UUID }}"

      - name: Terraform apply
        run: |
          cd iac/terraform
          rm -rf /home/runner/.ssh
          mkdir /home/runner/.ssh
          echo "${{ secrets.DO_SSH_PRIV }}" > /home/runner/.ssh/priv_key_test
          echo "${{ secrets.DO_SSH_PUB }}" > /home/runner/.ssh/priv_key_test.pub
          chmod 600 /home/runner/.ssh/priv_key_test
          cd "$GITHUB_WORKSPACE"
          cd "$GITHUB_WORKSPACE/iac/terraform"
          echo "yes" | terraform apply \
          -var "do_token=${{ secrets.DO_AUTH_TOKEN }}" \
          -var "pvt_key=${{ secrets.DO_SSH_PRIV }}" \
          -var "pvt_key_file=/home/runner/.ssh/priv_key_test" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
          -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
          -var "uuid=${{ env.UUID }}"
